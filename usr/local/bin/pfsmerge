#!/bin/sh
#Merge .pfs (for PuppyRus), by Zay, GPL v3.
#Version 0.16
#Modify 28.12.2013

checksfsxz >/dev/null 2>&1
if [ $? -gt 0 ]; then
  echo "Kernel not support PFS!" >&2; exit 1
fi
status=0

listpfs=""
inpath=""
cutpack=""
delpacks=""
for arg in "$@"
do
  case "${arg}" in
    "-d" | "--clean") clean="yes";;
    "-c" | "--cut") cutpack="yes";;
    "-a" | "--cmd" | "--add-command") addcmd="on";;
    "-no-progress" | "--no-progress") noprogress="-no-progress";;
    "-processors" | "--processors") numproc="on";;
    "-"*[A-Za-z]*) echo "$(basename "$0"): invalid option -- '$(echo ${arg} | tr -d '-')'" >&2; exit 1;;
    *) if [ "${cutpack}" ]; then delpacks="${delpacks}${arg}$IFS"
       elif [ "${addcmd}" = "on" ]; then usecommand="${arg}"
       elif [ "${numproc}" = "on" ]; then useproc="-processors ${arg}"
       else
         if [ "${inpath}" ]; then
           if [ -d "${inpath}" ]; then
             listin="${listpfs}$(find "${inpath}" -mindepth 1 -maxdepth 1 -type f -name '*.pfs' 2>/dev/null | sort)"
             [ "${listin}" != "" ] && listpfs="${listin}$IFS"
           else
             [ -f "${inpath}" ] && [ "$(basename "${inpath}" | awk -F. '{print $NF}' | tr A-Z a-z)" = "pfs" ] && listpfs="${listpfs}${inpath}$IFS"
           fi    
         fi
         inpath="${arg}"
       fi
       addcmd="off"; numproc="off";;
  esac
done

if [ "${listpfs}" = "" ]; then
  echo "Usage: $(basename "$0") [FILE or DIRECTORY] [FILE or DIRECTORY] ... NEWFILE"; exit 1
fi

outfile="${inpath}"
outbasename="$(basename "${outfile}")"
[ -d "/tmp/.pfs/merge/${outbasename}/" ] && rmdir "/tmp/.pfs/merge/${outbasename}/" 2>/dev/null
if [ -d "/tmp/.pfs/merge/${outbasename}/" ]; then
  echo "Progress is already running!" >&2; exit 1
fi

if [ ${status} -eq 0 ]; then
  numpoint=1
  freeloop=0
  looplist="$(losetup-FULL -a)"
  echo "${listpfs}" | while read mergefile
  do
    if [ "${mergefile}" != "" ]; then
      if [ ${numpoint} -gt 126 ]; then
        echo "Error! Can not merge more than 126 .pfs in a single pass!"; status=1
      fi
      if [ ${status} -eq 0 ]; then
        if [ -f "${mergefile}" ]; then
          sync
          while :; do
            echo "${looplist}" | grep -q -F "/dev/loop${freeloop}" && freeloop="$(expr ${freeloop} + 1)" || break
          done
          if [ ! -b /dev/loop${freeloop} ]; then
            mknod -m660 /dev/loop${freeloop} b 7 ${freeloop}
            chown root.root /dev/loop${freeloop}
            sync
          fi
          if [ ! -b /dev/loop${freeloop} ]; then
            echo "Error! Free loop devices is not found!" >&2; status=1
          fi
          if [ ${status} -eq 0 ]; then
            losetup-FULL /dev/loop${freeloop} "${mergefile}"
            status=$?
            if [ ${status} -eq 0 ]; then
              mkdir -p "/tmp/.pfs/merge/${outbasename}/${numpoint}_mp"
              busybox mount -t squashfs /dev/loop${freeloop} "/tmp/.pfs/merge/${outbasename}/${numpoint}_mp" >/dev/null 2>&1
              status=$?
              if [ ${status} -eq 0 ]; then
                freeloop="$(expr ${freeloop} + 1)"
                numpoint="$(expr ${numpoint} + 1)"
              else
                losetup-FULL -d /dev/loop${freeloop}
                echo "Mount \"${mergefile}\" failed!"
              fi
            fi
          fi
        fi
      fi
      if [ ${status} -gt 0 ]; then
        echo "${status}" >/tmp/.pfs/merge/"${outbasename}"/error.log; break
      fi
    fi
  done
fi
if [ -f /tmp/.pfs/merge/"${outbasename}"/error.log ]; then
  status="$(cat "/tmp/.pfs/merge/${outbasename}/error.log")"
  rm -f /tmp/.pfs/merge/"${outbasename}"/error.log
fi
sync

path="$(pwd)"
cd "/tmp/.pfs/merge/${outbasename}/" 
listmount="$(find . -mindepth 1 -maxdepth 1 -type d -name '*_mp' -printf '%f\n' 2>/dev/null | sort -n | sed 's/^/:.\//;s/$/=ro/' | tr -d '\n')"

if [ ${status} -eq 0 ]; then
  mkdir -p "/tmp/.pfs/merge/${outbasename}/0_mp"
  busybox mount -t tmpfs -o size=8m tmpfs "/tmp/.pfs/merge/${outbasename}/0_mp" >/dev/null 2>&1
  status=$?
  [ ${status} -gt 0 ] && echo "Create tempfs failed!" >&2
fi

if [ ${status} -eq 0 ]; then
  sync
  mkdir -p "/tmp/.pfs/merge/${outbasename}/pfs"
  busybox mount -t aufs -o "br:/tmp/.pfs/merge/${outbasename}/0_mp=rw+wh${listmount}" none "/tmp/.pfs/merge/${outbasename}/pfs" >/dev/null 2>&1
  status=$?
  [ ${status} -gt 0 ] && echo "Create layered filesystem failed!" >&2
  sync
fi

if [ ${status} -eq 0 ]; then
  listpackall="`find . -mindepth 1 -maxdepth 1 -type d -name '*_mp' | while read mpoint
  do
    [ -d "${mpoint}/etc/packages/mount" ] && echo "$(find "${mpoint}/etc/packages/mount" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' 2>/dev/null | grep -v "^[[:space:]]*$")"
  done | sort -f`"
  packsdub="$(echo "${listpackall}" | uniq -d)"
  if [ "${packsdub}" = "" ]; then
    echo "${listpackall}"
  else
    echo -en "\\033[1;31m"; echo -n "Packages are duplicated:"; echo -en "\\033[0;39m";
    echo "${IFS}${packsdub}"; status=1  
  fi 
fi
  
if [ ${status} -eq 0 ]; then
  if [ "${delpacks}" != "" ]; then
    echo "${delpacks}" | while read delpack
    do
      if [ "${delpack}" != "" ]; then
        if [ -f "./pfs/etc/packages/mount/${delpack}/pfs.files" ]; then
          delbase="$(basename "${delpack}")"
          otherfiles="`find "./pfs/etc/packages/mount" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read readpack; do
            [ "$(basename "${readpack}")" != "${delbase}" ] && [ -f "${readpack}/pfs.files" ] && echo "$(cat "${readpack}/pfs.files" | sed -e 's:^[^/]*::' -e 's:[\]:\\\\\\\\:g')"
          done | sort -u`${IFS}"
          dubfiles="`echo "$(cat "./pfs/etc/packages/mount/${delpack}/pfs.files" | sed -e 's:^[^/]*::' -e 's:[\]:\\\\\\\\:g')${IFS}${otherfiles}" | sort | uniq -d`"
          echo "$(cat "./pfs/etc/packages/mount/${delpack}/pfs.files" | sed -e 's:^[^/]*::' -e 's:[\]:\\\\\\\\:g')${IFS}${dubfiles}" | sed -e 's:[[:space:]]*$::g' | sort | uniq -u | while read delfile; do
            [ "${delfile}" != "" ] && rm -f "/tmp/.pfs/merge/${outbasename}/pfs${delfile}"
          done
          rm -rf "/tmp/.pfs/merge/${outbasename}/pfs/etc/packages/mount/${delpack}"
          echo "Package \"${delpack}\" deleted."
        else
          echo "Warning! Package \"${delpack}\" not found."
        fi
      fi
    done
  fi
  if [ ! -d "/tmp/.pfs/merge/${outbasename}/pfs/etc/packages/mount" ]; then
    echo "Packages not found!" >&2; status=1
  fi
fi

if [ ${status} -eq 0 ]; then
  if [ "${clean}" = "yes" ]; then
    echo "Cleaning..."
    allfiles="`find "./pfs/etc/packages/mount" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read readpack; do
      [ -f "${readpack}/pfs.files" ] && echo "$(cat "${readpack}/pfs.files" | sed -e 's:^[^/]*::' -e 's:[\]:\\\\\\\\:g')"
    done | sort -u`${IFS}"
    findfiles="$(find ./pfs ! -type d 2>/dev/null | grep -v -F '/etc/packages/' | cut -f2- -d's' | sort -u | sed -e 's:[\]:\\\\:g')${IFS}"
    echo "${allfiles}${findfiles}" | sort | uniq -u | while read delfile; do
      [ -f "/tmp/.pfs/merge/${outbasename}/pfs${delfile}" ] && rm -f "/tmp/.pfs/merge/${outbasename}/pfs${delfile}"
    done
    pfsdirsempty="`find "./pfs/etc/packages/mount" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read readpack; do
      [ -f "${readpack}/pfs.dirs.empty" ] && echo "$(cat "${readpack}/pfs.dirs.empty" | sed -e 's:^[^/]*::' -e 's:[\]:\\\\\\\\:g' -e 's:[/*]$::g')${IFS}"
    done | sort -u`"
    dirsempty="`echo "${pfsdirsempty}" | while read dirempty; do
      [ -d "./pfs${dirempty}" ] && [ "$(ls -A "./pfs${dirempty}" 2>/dev/null)" = "" ] && echo "${dirempty}"
    done | sort -u | sed -e 's:[\]:\\\\\\\\:g'`"
    while :; do
      listdirs="$(find ./pfs -type d -empty 2>/dev/null | grep -v -F '/etc/packages/' | cut -f2- -d's' | sort -u | sed -e 's:[\]:\\\\:g')"
      restlist="$(echo "${dirsempty}${IFS}${listdirs}" | sed -e 's:[[:space:]]*$::g' | sort | uniq -u | grep . | grep -v "^[[:space:]]*$")"
      [ "${restlist}" = "" ] && break
      [ "${restlist}" = "${oldrestlist}" ] && break
      echo "${restlist}" | while read deldir; do
        rmdir "/tmp/.pfs/merge/${outbasename}/pfs${deldir}" 2>/dev/null
      done
      oldrestlist="${restlist}"
    done
  fi
fi

if [ ${status} -eq 0 ]; then
  if [ "${usecommand}" != "" ]; then
    mkdir -p "/tmp/.pfs/merge/${outbasename}/pfs/tmp/.pfs/"
    echo -n "$(echo "${usecommand}" | tr -d '"' | tr -d "'")" >"/tmp/.pfs/merge/${outbasename}/pfs/tmp/.pfs/.command"
  fi
fi

cd "${path}"
sync
if [ ${status} -eq 0 ]; then
  if [ "$(ls -A "/tmp/.pfs/merge/${outbasename}/pfs" 2>/dev/null)" = "" ]; then
    echo "AUFS ERROR!" >&2; status=1
  fi
fi

if [ ${status} -eq 0 ]; then
  uname -m | grep -q -e "86" -e "32" -e "64" && bcjcomp="x86" || bcjcomp="x86,arm"
  mksquashfs "/tmp/.pfs/merge/${outbasename}/pfs" "${outfile}" -comp xz -b 512K -Xbcj ${bcjcomp} -noappend ${noprogress} ${useproc}
  status=$?
fi

busybox umount "/tmp/.pfs/merge/${outbasename}/pfs" 2>/dev/null
rmdir "/tmp/.pfs/merge/${outbasename}/pfs" 2>/dev/null

find "/tmp/.pfs/merge/${outbasename}/" -mindepth 1 -maxdepth 1 -type d -name '*_mp' 2>/dev/null | while read mpoint
do
  busybox umount -d "${mpoint}" >/dev/null; rmdir "${mpoint}" 2>/dev/null
done
rmdir "/tmp/.pfs/merge/${outbasename}/" 2>/dev/null
sync

exit ${status}
